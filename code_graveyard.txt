Code Graveyard

--------------------------

Antiquated, this version does not take row 12 and higher into account
// Finds the total number of frames required to display a chain animation
const getTotalFrames = function getTotalFrames(puyoLocs, boardState, settings) {
	let poppingPuyos = [];
	for (let i = 0; i < settings.cols; i++) {
		poppingPuyos.push([]);
	}
	for (let i = 0; i < puyoLocs.length; i++) {
		poppingPuyos[puyoLocs[i].col][puyoLocs[i].row] = true;
	}
	let maxPoppingUnder = 0;
	let poppingUnder = 0;
	let wasLastNonPopping = false;
	for (let i = 0; i < settings.cols; i++) {
		poppingUnder = 0;
		wasLastNonPopping = false;
		for (let j = settings.rows - 1; j >= 0 && poppingUnder === 0; j--) {
			if (wasLastNonPopping && poppingPuyos[i][j]) {
				poppingUnder = 1;
				for (let j1 = j - 1; j1 >= 0; j1--) {
					if(poppingPuyos[i][j1]) {
						poppingUnder++;
					}
				}
			} else if (boardState[i][j] != null && !poppingPuyos[i][j]) {
				wasLastNonPopping = true;
			}
		}
		if (poppingUnder > maxPoppingUnder) {
			maxPoppingUnder = poppingUnder;
		}
	}
	return maxPoppingUnder * settings.cascadeFramesPerRow + settings.popFrames;
};

--------------------------

Draws all the other drop shapes, but will need tweaking before used


draw_h(drop, size) {
    let ctx = this.ctx;
    ctx.save();
    this.drawPuyo(drop.colours[0], size);
    ctx.translate(size * Math.cos(drop.standardAngle + Math.PI / 2), - size * Math.sin(drop.standardAngle + Math.PI / 2));
    this.drawPuyo(drop.colours[0], size);
    ctx.restore();
    ctx.save();
    ctx.translate(size * Math.cos(drop.standardAngle), - size * Math.sin(drop.standardAngle));
    this.drawPuyo(drop.colours[1], size);
    ctx.restore();
}

draw_L(drop, size) {
    let ctx = this.ctx;
    ctx.save();
    this.drawPuyo(drop.colours[0], size);
    ctx.translate(size * Math.cos(drop.standardAngle + Math.PI / 2), - size * Math.sin(drop.standardAngle + Math.PI / 2));
    this.drawPuyo(drop.colours[1], size);
    ctx.restore();
    ctx.save();
    ctx.translate(size * Math.cos(drop.standardAngle), - size * Math.sin(drop.standardAngle));
    this.drawPuyo(drop.colours[0], size);
    ctx.restore();
}

draw_H(drop, size) {
    let ctx = this.ctx;
    ctx.save();
    let xChange = size / Math.sqrt(2) * Math.cos(- drop.standardAngle + Math.PI / 4);
    let yChange = size / Math.sqrt(2) * Math.sin(- drop.standardAngle + Math.PI / 4);
    ctx.translate(- xChange, - yChange);
    this.drawPuyo(drop.colours[0], size);
    ctx.restore();
    ctx.save();
    ctx.translate(- yChange, xChange);
    this.drawPuyo(drop.colours[0], size);
    ctx.restore();
    ctx.save();
    ctx.translate(xChange, yChange);
    this.drawPuyo(drop.colours[1], size);
    ctx.restore();
    ctx.save();
    ctx.translate(yChange, - xChange);
    this.drawPuyo(drop.colours[1], size);
    ctx.restore();
}

draw_O(drop, size) {
    let ctx = this.ctx;
    ctx.save();
    let xChange = size / 2;
    let yChange = size / 2;
    ctx.translate(- xChange, - yChange);
    this.drawPuyo(drop.colours[0], size);
    ctx.restore();
    ctx.save();
    ctx.translate(- yChange, xChange);
    this.drawPuyo(drop.colours[0], size);
    ctx.restore();
    ctx.save();
    ctx.translate(xChange, yChange);
    this.drawPuyo(drop.colours[0], size);
    ctx.restore();
    ctx.save();
    ctx.translate(yChange, - xChange);
    this.drawPuyo(drop.colours[0], size);
    ctx.restore();
}
